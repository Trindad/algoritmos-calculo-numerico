clc
clear
format (10)

//
//printf("\n\nMetodo do Ajuste Multiplo:\n");
//
////A = [4, 6 ,10;
////    6, 14, 20;
////    10 ,20 ,30];
////z = [24 46 70];
//
////A = [ 8 22 8;22 108 57; 8 57 36];
////z = [57 92 -5];
//A = [8 22 8;22 108 57;8 57 36];
////z = [57 92 -5];
//A = [1.25 0.25 1.5;0.25 1.25 1.5;1.5 1.5 4];
//z = [0.25 0.25 1.5]
//////disp(det(A));

//A = [21.16 21.16^2;22.96 22.96^2; 25.11 25.11^2;27.02 27.02^2;29.64 29.64^2;32 1024];
//b = [13.41 13.87 14.5 14.6 14.45 13.6];
//
//xi = 0;
//xi_2 = 0;
//xi_yi = 0;
//yi_2 = 0;
//yi = 0;
//xi_yi2 =0;
//xi_3 = 0;
//xi_4 = 0;
//
//printf("\n\nLinear\n\n");
//for i = 1 : 6
//    
//    xi = xi + A(i);
//    
//    xi_2 = xi_2+A(i)^2;
//    
//    xi_3 = xi_3+A(i)^3;
//    
//    xi_4 = xi_4+A(i)^4;
//    
//    xi_yi = xi_yi+A(i)*b(i);
//    
//    xi_yi2 = xi_yi2+A(i)*A(i)*b(i);
//    
//    yi = yi + b(i);
//    
//    yi_2 = yi_2+b(i)^2;
//    
//end
//printf("xi= %f xi²=%f yi=%f",xi,xi_2,yi);

//
//A = [6 xi xi_2;xi xi_2 xi_3;xi_2 xi_3 xi_4];
//z = [yi,xi_yi,xi_yi2];
////disp(A);
//disp(z);
//disp(z(1)/6);
//A = [7 -1 3.4;
//    -1 61 6.1;
//    3.4 6.1 2.38];
//z = [59.4 35.8 33.69];
A = [1 1;1 3.1];z = [4 0.5];
x = inv(A)*z';
disp(x);

A = [1 3.1];
b =  [4 0.5];
ym = 4.5/2;
t = 0;
w = 0;
for i = 1:2
    nova = (x(2)*A(i))+x(1);
    t = t+(b(i)-nova)^2;
    w = w+(b(i)-ym)^2;
   printf("\nt %f w %f nova %f",t,w,nova);
end

R2 = 1-(t/w);
printf("\nR2:1-(%f/%f) %f\n",t,w,R2);


//z = [0^(1/3)  0.25^(1/3) 0.5^(1/3) 0.75^(1/3) 1] ;
//disp(z);
//A = [1 0 ;
//    1 0.25;
//    1 0.5;
//    1 0.75;
//    1 1];

A = [1 0.05;
    1 0.1;
    1 0.15;
    1 0.2;
    1 0.25;
    1 0.3];
//z = [0.150822889,0.38566248,0.527632742,0.755022584,0.84397007,0.967584026];
z = [0.86 0.68 0.59 0.47 0.43 0.38];
//A=[1 25 0;
//    1 9 0.04;
//    1 1 0.09;
//    1 0 0.25;
//    1 1 0.36;
//    1 9 0.64;
//    1 16 1];
//z = [5.1 6.3 7.4 8.9 9.5 10.7 11.5];
x = inv(A'*A)*(A'*z');
printf("Segundo método\n");
disp(x);
//A = [0 0.25 0.5 0.75 1];
//b = [0^(1/3)  0.25^(1/3) 0.5^(1/3) 0.75^(1/3) 1];
//
//A = [-5 -3 -1 0 1 3 4];
//B = [0 0.2 0.3 0.5 0.6 0.8 1];
//b = [5.1 6.3 7.4 8.9 9.5 10.7 11.5];

//b = [-0.150822889,-0.38566248,-0.527632742,-0.755022584,-0.84397007,-0.967584026];
//b = [0.150822889,0.38566248,0.527632742,0.755022584,0.84397007,0.967584026];
ym = 3.41/6;
t = 0;
w = 0;

A = [0.05 0.1 0.15 0.2 0.25 0.3];
b = [0.86 0.68 0.59 0.47 0.43 0.38];

//a1 = %e^x(1);
//a2=-(x(2));
a1 = x(1);
a2 = x(2);
for i = 1:6
    //nova = a1*(%e^(-a2*A(i)));
    nova = (a1)+a2*A(i);
    t = t+(b(i)-nova)^2;
    w = w+(b(i)-ym)^2;
   printf("\nt %f w %f nova %f",t,w,nova);
end

R2 = 1-(t/w);
printf("\nR2:1-(%f/%f) %f\n",t,w,R2);

//printf("-----------------------\nVetor x :\n");
//disp(x);
//printf("\n\nVetor z -- conferindo calculo\n");
//z = A * x;
//
//disp(z);
//
//A = [1 -1 -2;
//    1 0 -1;
//    1 1 0;
//    1 2 1;
//    1 4 1;
//    1 5 2;
//    1 5 3;
//    1 6 4];
//z = [13 11 9 4 11 9 1 -1];
////A = [1 0 1;
////    1 1 2;
////    1 2 3;
////    1 3 4];
////z = [3 5 7 9];
//
////A = [1 -1 -2;
////    1 0 -1;
////    1 1 0;
////    1 2 1; 
////    1 4 1;
////    1 5 2;
////    1 5 3;
////    1 6 4];
////    
////z = [13 11 9 4 11 9 1 -1];
//
//
//A = [1 0.5; 1 1;1 2];z = [5 2 1];
//A = [1 0 1 ;0 1 1 ;0 0 1 ;0.5 0.5 1]; z = [0 0 1 0.5];
//A = [1 21.16 21.16^2;1 22.96 22.96^2; 1 25.11 25.11^2;1 27.02 27.02^2;1 29.64 29.64^2;1 32 1024];
//z = [13.41 13.87 14.5 14.6 14.45 13.6];

//b = [0.1^(1/3) 0.25^(1/3) 0.5^(1/3) 0.75^(1/3) 0.9^(1/3)];
//A = [1 0.1 0.1^2 0.1^3;1 0.25 0.25^2 0.25^3;1 0.5 0.5^2 0.5^3;1 0.75 0.75^2 0.75^3;1 0.9 0.9^2 0.9^3]; 
//z = [log(b(1)) log(b(2)) log(b(3)) log(b(4)) log(b(5))];

//
//disp(x);
////
//disp(A*x);
//
//
////-------------------------------------------MQ-----------------------
//
//printf("\n\nMetodo dos Minimos Quadrados Linear");
//
//A = [1.3 3.4 5.1 6.8 8.0];
//b = [2 5.2 3.8 6.1 5.8];
//n = 5;

//A = [43.42 45.25 49.27 53.42];
//b = [27 22 17 9];
//n = 4;
//
//xi = 0;
//xi_2 = 0;
//xi_yi = 0;
//yi_2 = 0;
//yi = 0;
//printf("\n\nLinear\n\n");
//for i = 1 : n
//    
//    xi = xi + A(i);
//    
//    xi_2 = xi_2+A(i)^2;
//    
//    xi_yi = xi_yi+A(i)*b(i);
//    
//    yi = yi + b(i);
//    
//    yi_2 = yi_2+b(i)^2;
//    
//end
//printf("xi= %f xi²=%f yi=%f",xi,xi_2,yi);
//disp(xi,xi_2);
//disp(yi);
//b1 = ((n*xi_yi)-xi*yi)/(n*xi_2-xi^2);
//b0 = (yi-xi*b1)/(n);
//
//printf("f(44)=%d %d*x = %d",b0,b1,b0+b1*44);
//
//printf("\n\nY = %f + %fX",b0,b1);

//
//printf("\n\nMétodo dos Minimos Quadrados Matricial:");
//
//A = [1 1.3;1 3.4;1 5.1;1 6.8 ;1 8.0];
//b = [2 5.2 3.8 6.1 5.8]
//x = inv(A'*A)*(A'*b');
//printf("\nSolução X :\n");
//disp(x);
//
//
//printf("\n\nAjuste Polinomial\n");
//
//A = [1 0 0;
//    1 1 1;
//    1 2 4;
//    1 3 9];
//b = [1 2.5 2.8 3.8];
//x = inv(A'*A)*(A'*b');
//
//printf("Solução x:");
//disp(x);
//
//disp(inv(A)*x);
//
//A = [4 6 14;6 14 36; 14 36 98];
//b = [9.8 19.5 45.2];
//
//x = inv(A)*b';

//disp(X=lsq(A,b));
//
//x=[0.3 0.5 0.7 0.9 1.1 1.3];
//y=[3.3 2.1 1.4 1.2 0.9 0.8];
//m=length(x);
//g1=x.^2;
//g2=x.^1;
//g3=x.^0;
//a11=sum(g1.*g1);
//a12=sum(g1.*g2);
//a13=sum(g1.*g3);
//a21=sum(g2.*g1);
//a22=sum(g2.*g2);
//a23=sum(g2.*g3);
//a31=sum(g3.*g1);
//a32=sum(g3.*g2);
//a33=sum(g3.*g3);
//b1=sum(y.*g1);
//b2=sum(y.*g2);
//b3=sum(y.*g3);
//a=[a11 a12 a13; a21 a22 a23; a31 a32 a33];
//b=[b1; b2; b3];
//f=(a\b)';
//y1=f(1)*g1+f(2)*g2+f(3)*g3;
//dt=sqrt(sum((y-y1).^2)/m)
//g1=exp(x);
//g2=exp(-x);
//g3=x.^0;
//a11=sum(g1.*g1);
//a12=sum(g1.*g2);
//a13=sum(g1.*g3);
//a21=sum(g2.*g1);
//a22=sum(g2.*g2);
//a23=sum(g2.*g3);
//a31=sum(g3.*g1);
//a32=sum(g3.*g2);
//a33=sum(g3.*g3);
//b1=sum(y.*g1);
//b2=sum(y.*g2);
//b3=sum(y.*g3);
//a=[a11 a12 a13; a21 a22 a23; a31 a32 a33];
//b=[b1; b2; b3];
//f=(a\b)';
//y2=f(1)*g1+f(2)*g2+f(3)*g3;
//dt=sqrt(sum((y-y2).^2)/m)
//plot(x,y,'*red',x,y1,'-blue',x,y2,'-black');


//plot((- 0.0379866)*x^2+2.049802118034*x- 13.037471,(- 0.0379866*2)*x+2.049802118034);
//A = [4 7.5;7.5 16.57];
//
//b = [10.2 14.73];
//
//
//A = [3 3.5;3.5 5.25];b=[8 6.5];
//x = inv(A)*b';
//
//A = [1 1.4 2 3.1];
//b = [4 3.7 2 0.5];
//disp(x);
//
//disp(A*x);
//
//ym = 0;
//Y = zeros(0);
//for i = 1: 4
//        
//    Y(i)= x(1)+(x(2)*A(i));
//    ym = ym + b(i)
//    
//end
//
//ym = ym/4;
//disp(ym);
//
//sumx = 0;
//sumy = 0;
//sumxy = 0;
//sumx2 = 0;
//sumY = 0;
//for i = 1 : 4
//    sumx = sumx + A(i);
//    sumxy = sumxy + A(i)*b(i);
//    sumx2 = sumx2 + A(i)^2;
//    sumy = sumy + b(i);
//    sumY = sumY + Y(i);
//end
//
//R2 = 1 - ( (sumy-sumY)^2/(sumy-ym)^2 );
//disp(R2);